/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/scripts/pfcia.js":
/*!******************************!*\
  !*** ./src/scripts/pfcia.js ***!
  \******************************/
/***/ (() => {

eval("// Initialisation de la connexion avec Socket.io\r\nconst socket = io();\r\n\r\n// Récupération des éléments HTML nécessaires\r\nconst statusLabel = document.getElementById(\"gameInfo\");\r\nconst BTstone = document.getElementById(\"stone\");\r\nconst BTpaper = document.getElementById(\"paper\");\r\nconst BTcissors = document.getElementById(\"cissors\");\r\nconst winner = document.querySelector('#winnerName');\r\nconst BTreset = document.getElementById(\"button\");\r\nconst scoreBoard = document.getElementById(\"scoreBoard\");\r\n\r\n// Initialisation des scores et choix des joueurs\r\nlet player1Choice;\r\nlet player2Choice;\r\nlet player1Score = 0;\r\nlet player2Score = 0;\r\n\r\n// Tableau contenant les choix possibles\r\nconst choices = [\"Pierre\", \"Feuille\", \"Ciseaux\"];\r\n\r\n// Fonction pour désactiver les boutons de choix\r\nconst disableButtons = () => {\r\n    BTstone.disabled = true;\r\n    BTpaper.disabled = true;\r\n    BTcissors.disabled = true;\r\n}\r\n\r\n// Fonction pour réactiver les boutons de choix\r\nconst enableButtons = () => {\r\n    BTstone.disabled = false;\r\n    BTpaper.disabled = false;\r\n    BTcissors.disabled = false;\r\n}\r\n\r\n// Fonction pour rafraîchir le statut de la partie\r\nconst refreshStatus = (value) => {\r\n    if(value == 'playing') {\r\n        statusLabel.innerHTML = \"Veuillez choisir quoi jouer\";\r\n        enableButtons();\r\n    }\r\n}\r\n\r\n// Fonction qui compare les choix des joueurs et retourne le résultat de la partie\r\nconst play = (player1, player2) => {\r\n  if (player1 === player2) {\r\n    return \"Draw!\";\r\n  }\r\n  if (player1 === \"Pierre\") {\r\n    if (player2 === \"Ciseaux\") {\r\n      return \"Player wins with stone !\";\r\n    } else {\r\n      return \"AI wins with paper !\";\r\n    }\r\n  }\r\n  if (player1 === \"Feuille\") {\r\n    if (player2 === \"Pierre\") {\r\n      return \"Player wins with paper !\";\r\n    } else {\r\n      return \"AI wins with cissors !\";\r\n    }\r\n  }\r\n  if (player1 === \"Ciseaux\") {\r\n    if (player2 === \"Feuille\") {\r\n      return \"Player wins with cissors !\";\r\n    } else {\r\n      return \"AI wins with stone !\";\r\n    }\r\n  }\r\n};\r\n\r\n// Fonction pour mettre à jour le tableau des scores\r\nconst updateScoreBoard = () => {\r\n  const player1ScoreDisplay = document.querySelector('#player1Score');\r\n  player1ScoreDisplay.textContent = player1Score;\r\n  const player2ScoreDisplay = document.querySelector('#player2Score');\r\n  player2ScoreDisplay.textContent = player2Score;\r\n}\r\n\r\n// Fonction pour réinitialiser la partie\r\nconst end = () => {\r\n  player1Score = 0;\r\n  player2Score = 0;\r\n  updateScoreBoard();\r\n  winner.textContent = '';\r\n  enableButtons();\r\n}\r\n\r\n// Écouteur d'événement pour le bouton de réinitialisation de la partie\r\nBTreset.addEventListener(\"click\", () => {\r\n  socket.emit('buttonClickedai');\r\n});\r\n\r\n// Écouteur d'événement pour le bouton \"Pierre\" quand il est cliqué\r\nBTstone.addEventListener(\"click\", () => {\r\ndisableButtons();\r\nplayer1Choice = \"Pierre\";\r\nplayer2Choice = choices[Math.floor(Math.random() * choices.length)];\r\nstatusLabel.textContent = play(player1Choice, player2Choice);\r\nif (statusLabel.textContent.includes(\"Player win\")) {\r\nplayer1Score += 1;\r\n}\r\nif (statusLabel.textContent.includes(\"AI wins\")) {\r\nplayer2Score += 1;\r\n}\r\nupdateScoreBoard();\r\nscoreBoard.style.display = \"block\";\r\nif (player1Score >= 3 || player2Score >= 3) {\r\nconst winnerName = player1Score > player2Score ? \"Player\" : \"AI\";\r\nwinner.textContent = `${winnerName} has won the game!`;\r\nsocket.emit(\"end\");\r\nBTreset.disabled=true;\r\n}\r\n});\r\n\r\n// Écouteur d'événement pour le bouton \"Feuille\" quand il est cliqué\r\nBTpaper.addEventListener(\"click\", () => {\r\ndisableButtons();\r\nplayer1Choice = \"Feuille\";\r\nplayer2Choice = choices[Math.floor(Math.random() * choices.length)];\r\nstatusLabel.textContent = play(player1Choice, player2Choice);\r\nif (statusLabel.textContent.includes(\"Player win\")) {\r\nplayer1Score += 1;\r\n}\r\nif (statusLabel.textContent.includes(\"AI wins\")) {\r\nplayer2Score += 1;\r\n}\r\nupdateScoreBoard();\r\nscoreBoard.style.display = \"block\";\r\nif (player1Score >= 3 || player2Score >= 3) {\r\nconst winnerName = player1Score > player2Score ? \"Player\" : \"AI\";\r\nwinner.textContent = `${winnerName} has won the game!`;\r\nsocket.emit(\"end\");\r\nBTreset.disabled=true;\r\n}\r\n});\r\n\r\n\r\n// Écouteur d'événement pour le bouton \"Ciseaux\" quand il est cliqué\r\nBTcissors.addEventListener(\"click\", () => {\r\n    disableButtons();\r\n    player1Choice = \"Ciseaux\";\r\n    player2Choice = choices[Math.floor(Math.random() * choices.length)];\r\n    statusLabel.textContent = play(player1Choice, player2Choice);\r\n    if (statusLabel.textContent.includes(\"Player win\")) {\r\n      player1Score += 1;\r\n    }\r\n    if (statusLabel.textContent.includes(\"AI wins\")) {\r\n      player2Score += 1;\r\n    }\r\n    updateScoreBoard();\r\n    scoreBoard.style.display = \"block\";\r\n    if (player1Score >= 3 || player2Score >= 3) {\r\n      const winnerName = player1Score > player2Score ? \"Player\" : \"AI\";\r\n      winner.textContent = `${winnerName} has won the game!`;\r\n      socket.emit(\"end\");\r\n      BTreset.disabled=true;\r\n  }\r\n    });\r\n\r\n// Événements pour la connexion au serveur\r\nsocket.emit('new');\r\nsocket.on('status', value => refreshStatus(value));\r\n// Cette fonction est appelée lorsque le jeu est réinitialisé\r\nsocket.on('gameResetai',()=>{\r\n  enableButtons();\r\n  statusLabel.innerHTML = \"C'est à votre tour de jouer.\";\r\n});\r\n// Cette fonction est appelée lorsque le nombre maximum de joueurs est atteint\r\nsocket.on('maxPlayersReached', () => {\r\n  console.log(\"Le nombre maximum de joueurs a été atteint, connexion refusée.\");\r\n  statusLabel.innerHTML = \"Nombre maximal de joueurs atteint, connexion refusée.\";\r\n  disableButtons();\r\n});\r\n\n\n//# sourceURL=webpack://client/./src/scripts/pfcia.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/scripts/pfcia.js"]();
/******/ 	
/******/ })()
;